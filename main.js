/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={d:(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{afterMain:()=>w,afterRead:()=>b,afterWrite:()=>C,applyStyles:()=>S,arrow:()=>J,auto:()=>r,basePlacements:()=>a,beforeMain:()=>v,beforeRead:()=>g,beforeWrite:()=>E,bottom:()=>i,clippingParents:()=>d,computeStyles:()=>et,createPopper:()=>It,createPopperBase:()=>Lt,createPopperLite:()=>St,detectOverflow:()=>gt,end:()=>c,eventListeners:()=>it,flip:()=>_t,hide:()=>yt,left:()=>o,main:()=>y,modifierPhases:()=>k,offset:()=>wt,placements:()=>m,popper:()=>h,popperGenerator:()=>Ot,popperOffsets:()=>Et,preventOverflow:()=>At,read:()=>_,reference:()=>f,right:()=>s,start:()=>l,top:()=>n,variationPlacements:()=>p,viewport:()=>u,write:()=>A});var n="top",i="bottom",s="right",o="left",r="auto",a=[n,i,s,o],l="start",c="end",d="clippingParents",u="viewport",h="popper",f="reference",p=a.reduce((function(t,e){return t.concat([e+"-"+l,e+"-"+c])}),[]),m=[].concat(a,[r]).reduce((function(t,e){return t.concat([e,e+"-"+l,e+"-"+c])}),[]),g="beforeRead",_="read",b="afterRead",v="beforeMain",y="main",w="afterMain",E="beforeWrite",A="write",C="afterWrite",k=[g,_,b,v,y,w,E,A,C];function x(t){return t?(t.nodeName||"").toLowerCase():null}function T(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function O(t){return t instanceof T(t).Element||t instanceof Element}function L(t){return t instanceof T(t).HTMLElement||t instanceof HTMLElement}function I(t){return"undefined"!=typeof ShadowRoot&&(t instanceof T(t).ShadowRoot||t instanceof ShadowRoot)}const S={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},i=e.attributes[t]||{},s=e.elements[t];L(s)&&x(s)&&(Object.assign(s.style,n),Object.keys(i).forEach((function(t){var e=i[t];!1===e?s.removeAttribute(t):s.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var i=e.elements[t],s=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});L(i)&&x(i)&&(Object.assign(i.style,o),Object.keys(s).forEach((function(t){i.removeAttribute(t)})))}))}},requires:["computeStyles"]};function D(t){return t.split("-")[0]}var $=Math.max,j=Math.min,N=Math.round;function P(){var t=navigator.userAgentData;return null!=t&&t.brands&&Array.isArray(t.brands)?t.brands.map((function(t){return t.brand+"/"+t.version})).join(" "):navigator.userAgent}function M(){return!/^((?!chrome|android).)*safari/i.test(P())}function B(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!1);var i=t.getBoundingClientRect(),s=1,o=1;e&&L(t)&&(s=t.offsetWidth>0&&N(i.width)/t.offsetWidth||1,o=t.offsetHeight>0&&N(i.height)/t.offsetHeight||1);var r=(O(t)?T(t):window).visualViewport,a=!M()&&n,l=(i.left+(a&&r?r.offsetLeft:0))/s,c=(i.top+(a&&r?r.offsetTop:0))/o,d=i.width/s,u=i.height/o;return{width:d,height:u,top:c,right:l+d,bottom:c+u,left:l,x:l,y:c}}function F(t){var e=B(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}function H(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&I(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function q(t){return T(t).getComputedStyle(t)}function K(t){return["table","td","th"].indexOf(x(t))>=0}function W(t){return((O(t)?t.ownerDocument:t.document)||window.document).documentElement}function z(t){return"html"===x(t)?t:t.assignedSlot||t.parentNode||(I(t)?t.host:null)||W(t)}function R(t){return L(t)&&"fixed"!==q(t).position?t.offsetParent:null}function V(t){for(var e=T(t),n=R(t);n&&K(n)&&"static"===q(n).position;)n=R(n);return n&&("html"===x(n)||"body"===x(n)&&"static"===q(n).position)?e:n||function(t){var e=/firefox/i.test(P());if(/Trident/i.test(P())&&L(t)&&"fixed"===q(t).position)return null;var n=z(t);for(I(n)&&(n=n.host);L(n)&&["html","body"].indexOf(x(n))<0;){var i=q(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||e&&"filter"===i.willChange||e&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(t)||e}function Y(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function Q(t,e,n){return $(t,j(e,n))}function X(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function U(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}const J={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,r=t.state,l=t.name,c=t.options,d=r.elements.arrow,u=r.modifiersData.popperOffsets,h=D(r.placement),f=Y(h),p=[o,s].indexOf(h)>=0?"height":"width";if(d&&u){var m=function(t,e){return X("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:U(t,a))}(c.padding,r),g=F(d),_="y"===f?n:o,b="y"===f?i:s,v=r.rects.reference[p]+r.rects.reference[f]-u[f]-r.rects.popper[p],y=u[f]-r.rects.reference[f],w=V(d),E=w?"y"===f?w.clientHeight||0:w.clientWidth||0:0,A=v/2-y/2,C=m[_],k=E-g[p]-m[b],x=E/2-g[p]/2+A,T=Q(C,x,k),O=f;r.modifiersData[l]=((e={})[O]=T,e.centerOffset=T-x,e)}},effect:function(t){var e=t.state,n=t.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=e.elements.popper.querySelector(i)))&&H(e.elements.popper,i)&&(e.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function G(t){return t.split("-")[1]}var Z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function tt(t){var e,r=t.popper,a=t.popperRect,l=t.placement,d=t.variation,u=t.offsets,h=t.position,f=t.gpuAcceleration,p=t.adaptive,m=t.roundOffsets,g=t.isFixed,_=u.x,b=void 0===_?0:_,v=u.y,y=void 0===v?0:v,w="function"==typeof m?m({x:b,y}):{x:b,y};b=w.x,y=w.y;var E=u.hasOwnProperty("x"),A=u.hasOwnProperty("y"),C=o,k=n,x=window;if(p){var O=V(r),L="clientHeight",I="clientWidth";O===T(r)&&"static"!==q(O=W(r)).position&&"absolute"===h&&(L="scrollHeight",I="scrollWidth"),(l===n||(l===o||l===s)&&d===c)&&(k=i,y-=(g&&O===x&&x.visualViewport?x.visualViewport.height:O[L])-a.height,y*=f?1:-1),l!==o&&(l!==n&&l!==i||d!==c)||(C=s,b-=(g&&O===x&&x.visualViewport?x.visualViewport.width:O[I])-a.width,b*=f?1:-1)}var S,D=Object.assign({position:h},p&&Z),$=!0===m?function(t,e){var n=t.x,i=t.y,s=e.devicePixelRatio||1;return{x:N(n*s)/s||0,y:N(i*s)/s||0}}({x:b,y},T(r)):{x:b,y};return b=$.x,y=$.y,f?Object.assign({},D,((S={})[k]=A?"0":"",S[C]=E?"0":"",S.transform=(x.devicePixelRatio||1)<=1?"translate("+b+"px, "+y+"px)":"translate3d("+b+"px, "+y+"px, 0)",S)):Object.assign({},D,((e={})[k]=A?y+"px":"",e[C]=E?b+"px":"",e.transform="",e))}const et={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,s=void 0===i||i,o=n.adaptive,r=void 0===o||o,a=n.roundOffsets,l=void 0===a||a,c={placement:D(e.placement),variation:G(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,tt(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,tt(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var nt={passive:!0};const it={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,i=t.options,s=i.scroll,o=void 0===s||s,r=i.resize,a=void 0===r||r,l=T(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",n.update,nt)})),a&&l.addEventListener("resize",n.update,nt),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",n.update,nt)})),a&&l.removeEventListener("resize",n.update,nt)}},data:{}};var st={left:"right",right:"left",bottom:"top",top:"bottom"};function ot(t){return t.replace(/left|right|bottom|top/g,(function(t){return st[t]}))}var rt={start:"end",end:"start"};function at(t){return t.replace(/start|end/g,(function(t){return rt[t]}))}function lt(t){var e=T(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function ct(t){return B(W(t)).left+lt(t).scrollLeft}function dt(t){var e=q(t),n=e.overflow,i=e.overflowX,s=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+s+i)}function ut(t){return["html","body","#document"].indexOf(x(t))>=0?t.ownerDocument.body:L(t)&&dt(t)?t:ut(z(t))}function ht(t,e){var n;void 0===e&&(e=[]);var i=ut(t),s=i===(null==(n=t.ownerDocument)?void 0:n.body),o=T(i),r=s?[o].concat(o.visualViewport||[],dt(i)?i:[]):i,a=e.concat(r);return s?a:a.concat(ht(z(r)))}function ft(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function pt(t,e,n){return e===u?ft(function(t,e){var n=T(t),i=W(t),s=n.visualViewport,o=i.clientWidth,r=i.clientHeight,a=0,l=0;if(s){o=s.width,r=s.height;var c=M();(c||!c&&"fixed"===e)&&(a=s.offsetLeft,l=s.offsetTop)}return{width:o,height:r,x:a+ct(t),y:l}}(t,n)):O(e)?function(t,e){var n=B(t,!1,"fixed"===e);return n.top=n.top+t.clientTop,n.left=n.left+t.clientLeft,n.bottom=n.top+t.clientHeight,n.right=n.left+t.clientWidth,n.width=t.clientWidth,n.height=t.clientHeight,n.x=n.left,n.y=n.top,n}(e,n):ft(function(t){var e,n=W(t),i=lt(t),s=null==(e=t.ownerDocument)?void 0:e.body,o=$(n.scrollWidth,n.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=$(n.scrollHeight,n.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-i.scrollLeft+ct(t),l=-i.scrollTop;return"rtl"===q(s||n).direction&&(a+=$(n.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}(W(t)))}function mt(t){var e,r=t.reference,a=t.element,d=t.placement,u=d?D(d):null,h=d?G(d):null,f=r.x+r.width/2-a.width/2,p=r.y+r.height/2-a.height/2;switch(u){case n:e={x:f,y:r.y-a.height};break;case i:e={x:f,y:r.y+r.height};break;case s:e={x:r.x+r.width,y:p};break;case o:e={x:r.x-a.width,y:p};break;default:e={x:r.x,y:r.y}}var m=u?Y(u):null;if(null!=m){var g="y"===m?"height":"width";switch(h){case l:e[m]=e[m]-(r[g]/2-a[g]/2);break;case c:e[m]=e[m]+(r[g]/2-a[g]/2)}}return e}function gt(t,e){void 0===e&&(e={});var o=e,r=o.placement,l=void 0===r?t.placement:r,c=o.strategy,p=void 0===c?t.strategy:c,m=o.boundary,g=void 0===m?d:m,_=o.rootBoundary,b=void 0===_?u:_,v=o.elementContext,y=void 0===v?h:v,w=o.altBoundary,E=void 0!==w&&w,A=o.padding,C=void 0===A?0:A,k=X("number"!=typeof C?C:U(C,a)),T=y===h?f:h,I=t.rects.popper,S=t.elements[E?T:y],D=function(t,e,n,i){var s="clippingParents"===e?function(t){var e=ht(z(t)),n=["absolute","fixed"].indexOf(q(t).position)>=0&&L(t)?V(t):t;return O(n)?e.filter((function(t){return O(t)&&H(t,n)&&"body"!==x(t)})):[]}(t):[].concat(e),o=[].concat(s,[n]),r=o[0],a=o.reduce((function(e,n){var s=pt(t,n,i);return e.top=$(s.top,e.top),e.right=j(s.right,e.right),e.bottom=j(s.bottom,e.bottom),e.left=$(s.left,e.left),e}),pt(t,r,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(O(S)?S:S.contextElement||W(t.elements.popper),g,b,p),N=B(t.elements.reference),P=mt({reference:N,element:I,strategy:"absolute",placement:l}),M=ft(Object.assign({},I,P)),F=y===h?M:N,K={top:D.top-F.top+k.top,bottom:F.bottom-D.bottom+k.bottom,left:D.left-F.left+k.left,right:F.right-D.right+k.right},R=t.modifiersData.offset;if(y===h&&R){var Y=R[l];Object.keys(K).forEach((function(t){var e=[s,i].indexOf(t)>=0?1:-1,o=[n,i].indexOf(t)>=0?"y":"x";K[t]+=Y[o]*e}))}return K}const _t={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,c=t.options,d=t.name;if(!e.modifiersData[d]._skip){for(var u=c.mainAxis,h=void 0===u||u,f=c.altAxis,g=void 0===f||f,_=c.fallbackPlacements,b=c.padding,v=c.boundary,y=c.rootBoundary,w=c.altBoundary,E=c.flipVariations,A=void 0===E||E,C=c.allowedAutoPlacements,k=e.options.placement,x=D(k),T=_||(x!==k&&A?function(t){if(D(t)===r)return[];var e=ot(t);return[at(t),e,at(e)]}(k):[ot(k)]),O=[k].concat(T).reduce((function(t,n){return t.concat(D(n)===r?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,s=n.boundary,o=n.rootBoundary,r=n.padding,l=n.flipVariations,c=n.allowedAutoPlacements,d=void 0===c?m:c,u=G(i),h=u?l?p:p.filter((function(t){return G(t)===u})):a,f=h.filter((function(t){return d.indexOf(t)>=0}));0===f.length&&(f=h);var g=f.reduce((function(e,n){return e[n]=gt(t,{placement:n,boundary:s,rootBoundary:o,padding:r})[D(n)],e}),{});return Object.keys(g).sort((function(t,e){return g[t]-g[e]}))}(e,{placement:n,boundary:v,rootBoundary:y,padding:b,flipVariations:A,allowedAutoPlacements:C}):n)}),[]),L=e.rects.reference,I=e.rects.popper,S=new Map,$=!0,j=O[0],N=0;N<O.length;N++){var P=O[N],M=D(P),B=G(P)===l,F=[n,i].indexOf(M)>=0,H=F?"width":"height",q=gt(e,{placement:P,boundary:v,rootBoundary:y,altBoundary:w,padding:b}),K=F?B?s:o:B?i:n;L[H]>I[H]&&(K=ot(K));var W=ot(K),z=[];if(h&&z.push(q[M]<=0),g&&z.push(q[K]<=0,q[W]<=0),z.every((function(t){return t}))){j=P,$=!1;break}S.set(P,z)}if($)for(var R=function(t){var e=O.find((function(e){var n=S.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return j=e,"break"},V=A?3:1;V>0&&"break"!==R(V);V--);e.placement!==j&&(e.modifiersData[d]._skip=!0,e.placement=j,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function bt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function vt(t){return[n,s,i,o].some((function(e){return t[e]>=0}))}const yt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,s=e.rects.popper,o=e.modifiersData.preventOverflow,r=gt(e,{elementContext:"reference"}),a=gt(e,{altBoundary:!0}),l=bt(r,i),c=bt(a,s,o),d=vt(l),u=vt(c);e.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:u},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":u})}},wt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,i=t.options,r=t.name,a=i.offset,l=void 0===a?[0,0]:a,c=m.reduce((function(t,i){return t[i]=function(t,e,i){var r=D(t),a=[o,n].indexOf(r)>=0?-1:1,l="function"==typeof i?i(Object.assign({},e,{placement:t})):i,c=l[0],d=l[1];return c=c||0,d=(d||0)*a,[o,s].indexOf(r)>=0?{x:d,y:c}:{x:c,y:d}}(i,e.rects,l),t}),{}),d=c[e.placement],u=d.x,h=d.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=u,e.modifiersData.popperOffsets.y+=h),e.modifiersData[r]=c}},Et={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=mt({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},At={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,r=t.options,a=t.name,c=r.mainAxis,d=void 0===c||c,u=r.altAxis,h=void 0!==u&&u,f=r.boundary,p=r.rootBoundary,m=r.altBoundary,g=r.padding,_=r.tether,b=void 0===_||_,v=r.tetherOffset,y=void 0===v?0:v,w=gt(e,{boundary:f,rootBoundary:p,padding:g,altBoundary:m}),E=D(e.placement),A=G(e.placement),C=!A,k=Y(E),x="x"===k?"y":"x",T=e.modifiersData.popperOffsets,O=e.rects.reference,L=e.rects.popper,I="function"==typeof y?y(Object.assign({},e.rects,{placement:e.placement})):y,S="number"==typeof I?{mainAxis:I,altAxis:I}:Object.assign({mainAxis:0,altAxis:0},I),N=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,P={x:0,y:0};if(T){if(d){var M,B="y"===k?n:o,H="y"===k?i:s,q="y"===k?"height":"width",K=T[k],W=K+w[B],z=K-w[H],R=b?-L[q]/2:0,X=A===l?O[q]:L[q],U=A===l?-L[q]:-O[q],J=e.elements.arrow,Z=b&&J?F(J):{width:0,height:0},tt=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},et=tt[B],nt=tt[H],it=Q(0,O[q],Z[q]),st=C?O[q]/2-R-it-et-S.mainAxis:X-it-et-S.mainAxis,ot=C?-O[q]/2+R+it+nt+S.mainAxis:U+it+nt+S.mainAxis,rt=e.elements.arrow&&V(e.elements.arrow),at=rt?"y"===k?rt.clientTop||0:rt.clientLeft||0:0,lt=null!=(M=null==N?void 0:N[k])?M:0,ct=K+ot-lt,dt=Q(b?j(W,K+st-lt-at):W,K,b?$(z,ct):z);T[k]=dt,P[k]=dt-K}if(h){var ut,ht="x"===k?n:o,ft="x"===k?i:s,pt=T[x],mt="y"===x?"height":"width",_t=pt+w[ht],bt=pt-w[ft],vt=-1!==[n,o].indexOf(E),yt=null!=(ut=null==N?void 0:N[x])?ut:0,wt=vt?_t:pt-O[mt]-L[mt]-yt+S.altAxis,Et=vt?pt+O[mt]+L[mt]-yt-S.altAxis:bt,At=b&&vt?function(t,e,n){var i=Q(t,e,n);return i>n?n:i}(wt,pt,Et):Q(b?wt:_t,pt,b?Et:bt);T[x]=At,P[x]=At-pt}e.modifiersData[a]=P}},requiresIfExists:["offset"]};function Ct(t,e,n){void 0===n&&(n=!1);var i,s,o=L(e),r=L(e)&&function(t){var e=t.getBoundingClientRect(),n=N(e.width)/t.offsetWidth||1,i=N(e.height)/t.offsetHeight||1;return 1!==n||1!==i}(e),a=W(e),l=B(t,r,n),c={scrollLeft:0,scrollTop:0},d={x:0,y:0};return(o||!o&&!n)&&(("body"!==x(e)||dt(a))&&(c=(i=e)!==T(i)&&L(i)?{scrollLeft:(s=i).scrollLeft,scrollTop:s.scrollTop}:lt(i)),L(e)?((d=B(e,!0)).x+=e.clientLeft,d.y+=e.clientTop):a&&(d.x=ct(a))),{x:l.left+c.scrollLeft-d.x,y:l.top+c.scrollTop-d.y,width:l.width,height:l.height}}function kt(t){var e=new Map,n=new Set,i=[];function s(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&s(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||s(t)})),i}var xt={placement:"bottom",modifiers:[],strategy:"absolute"};function Tt(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function Ot(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,s=e.defaultOptions,o=void 0===s?xt:s;return function(t,e,n){void 0===n&&(n=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},xt,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,d={state:a,setOptions:function(n){var s="function"==typeof n?n(a.options):n;u(),a.options=Object.assign({},o,a.options,s),a.scrollParents={reference:O(t)?ht(t):t.contextElement?ht(t.contextElement):[],popper:ht(e)};var r,c,h=function(t){var e=kt(t);return k.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((r=[].concat(i,a.options.modifiers),c=r.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(c).map((function(t){return c[t]}))));return a.orderedModifiers=h.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,s=t.effect;if("function"==typeof s){var o=s({state:a,name:e,instance:d,options:i});l.push(o||function(){})}})),d.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,n=t.popper;if(Tt(e,n)){a.rects={reference:Ct(e,V(n),"fixed"===a.options.strategy),popper:F(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var s=a.orderedModifiers[i],o=s.fn,r=s.options,l=void 0===r?{}:r,u=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:u,instance:d})||a)}else a.reset=!1,i=-1}}},update:(s=function(){return new Promise((function(t){d.forceUpdate(),t(a)}))},function(){return r||(r=new Promise((function(t){Promise.resolve().then((function(){r=void 0,t(s())}))}))),r}),destroy:function(){u(),c=!0}};if(!Tt(t,e))return d;function u(){l.forEach((function(t){return t()})),l=[]}return d.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),d}}var Lt=Ot(),It=Ot({defaultModifiers:[it,Et,et,S,wt,_t,At,J,yt]}),St=Ot({defaultModifiers:[it,Et,et,S]});const Dt=new Map,$t={set(t,e,n){Dt.has(t)||Dt.set(t,new Map);const i=Dt.get(t);i.has(e)||0===i.size?i.set(e,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(t,e)=>Dt.has(t)&&Dt.get(t).get(e)||null,remove(t,e){if(!Dt.has(t))return;const n=Dt.get(t);n.delete(e),0===n.size&&Dt.delete(t)}},jt="transitionend",Nt=t=>(t&&window.CSS&&window.CSS.escape&&(t=t.replace(/#([^\s"#']+)/g,((t,e)=>`#${CSS.escape(e)}`))),t),Pt=t=>{t.dispatchEvent(new Event(jt))},Mt=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),Bt=t=>Mt(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(Nt(t)):null,Ft=t=>{if(!Mt(t)||0===t.getClientRects().length)return!1;const e="visible"===getComputedStyle(t).getPropertyValue("visibility"),n=t.closest("details:not([open])");if(!n)return e;if(n!==t){const e=t.closest("summary");if(e&&e.parentNode!==n)return!1;if(null===e)return!1}return e},Ht=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),qt=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?qt(t.parentNode):null},Kt=()=>{},Wt=t=>{t.offsetHeight},zt=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,Rt=[],Vt=()=>"rtl"===document.documentElement.dir,Yt=t=>{var e;e=()=>{const e=zt();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=i,t.jQueryInterface)}},"loading"===document.readyState?(Rt.length||document.addEventListener("DOMContentLoaded",(()=>{for(const t of Rt)t()})),Rt.push(e)):e()},Qt=(t,e=[],n=t)=>"function"==typeof t?t(...e):n,Xt=(t,e,n=!0)=>{if(!n)return void Qt(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),s=Number.parseFloat(n);return i||s?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let s=!1;const o=({target:n})=>{n===e&&(s=!0,e.removeEventListener(jt,o),Qt(t))};e.addEventListener(jt,o),setTimeout((()=>{s||Pt(e)}),i)},Ut=(t,e,n,i)=>{const s=t.length;let o=t.indexOf(e);return-1===o?!n&&i?t[s-1]:t[0]:(o+=n?1:-1,i&&(o=(o+s)%s),t[Math.max(0,Math.min(o,s-1))])},Jt=/[^.]*(?=\..*)\.|.*/,Gt=/\..*/,Zt=/::\d+$/,te={};let ee=1;const ne={mouseenter:"mouseover",mouseleave:"mouseout"},ie=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function se(t,e){return e&&`${e}::${ee++}`||t.uidEvent||ee++}function oe(t){const e=se(t);return t.uidEvent=e,te[e]=te[e]||{},te[e]}function re(t,e,n=null){return Object.values(t).find((t=>t.callable===e&&t.delegationSelector===n))}function ae(t,e,n){const i="string"==typeof e,s=i?n:e||n;let o=ue(t);return ie.has(o)||(o=t),[i,s,o]}function le(t,e,n,i,s){if("string"!=typeof e||!t)return;let[o,r,a]=ae(e,n,i);if(e in ne){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};r=t(r)}const l=oe(t),c=l[a]||(l[a]={}),d=re(c,r,o?n:null);if(d)return void(d.oneOff=d.oneOff&&s);const u=se(r,e.replace(Jt,"")),h=o?function(t,e,n){return function i(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(const a of o)if(a===r)return fe(s,{delegateTarget:r}),i.oneOff&&he.off(t,s.type,e,n),n.apply(r,[s])}}(t,n,r):function(t,e){return function n(i){return fe(i,{delegateTarget:t}),n.oneOff&&he.off(t,i.type,e),e.apply(t,[i])}}(t,r);h.delegationSelector=o?n:null,h.callable=r,h.oneOff=s,h.uidEvent=u,c[u]=h,t.addEventListener(a,h,o)}function ce(t,e,n,i,s){const o=re(e[n],i,s);o&&(t.removeEventListener(n,o,Boolean(s)),delete e[n][o.uidEvent])}function de(t,e,n,i){const s=e[n]||{};for(const[o,r]of Object.entries(s))o.includes(i)&&ce(t,e,n,r.callable,r.delegationSelector)}function ue(t){return t=t.replace(Gt,""),ne[t]||t}const he={on(t,e,n,i){le(t,e,n,i,!1)},one(t,e,n,i){le(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[s,o,r]=ae(e,n,i),a=r!==e,l=oe(t),c=l[r]||{},d=e.startsWith(".");if(void 0===o){if(d)for(const n of Object.keys(l))de(t,l,n,e.slice(1));for(const[n,i]of Object.entries(c)){const s=n.replace(Zt,"");a&&!e.includes(s)||ce(t,l,r,i.callable,i.delegationSelector)}}else{if(!Object.keys(c).length)return;ce(t,l,r,o,s?n:null)}},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=zt();let s=null,o=!0,r=!0,a=!1;e!==ue(e)&&i&&(s=i.Event(e,n),i(t).trigger(s),o=!s.isPropagationStopped(),r=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());const l=fe(new Event(e,{bubbles:o,cancelable:!0}),n);return a&&l.preventDefault(),r&&t.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function fe(t,e={}){for(const[n,i]of Object.entries(e))try{t[n]=i}catch(e){Object.defineProperty(t,n,{configurable:!0,get:()=>i})}return t}function pe(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function me(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}const ge={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${me(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${me(e)}`)},getDataAttributes(t){if(!t)return{};const e={},n=Object.keys(t.dataset).filter((t=>t.startsWith("bs")&&!t.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),e[n]=pe(t.dataset[i])}return e},getDataAttribute:(t,e)=>pe(t.getAttribute(`data-bs-${me(e)}`))};class _e{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(t){return t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t}_mergeConfigObj(t,e){const n=Mt(e)?ge.getDataAttribute(e,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...Mt(e)?ge.getDataAttributes(e):{},..."object"==typeof t?t:{}}}_typeCheckConfig(t,e=this.constructor.DefaultType){for(const[i,s]of Object.entries(e)){const e=t[i],o=Mt(e)?"element":null==(n=e)?`${n}`:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${o}" but expected type "${s}".`)}var n}}class be extends _e{constructor(t,e){super(),(t=Bt(t))&&(this._element=t,this._config=this._getConfig(e),$t.set(this._element,this.constructor.DATA_KEY,this))}dispose(){$t.remove(this._element,this.constructor.DATA_KEY),he.off(this._element,this.constructor.EVENT_KEY);for(const t of Object.getOwnPropertyNames(this))this[t]=null}_queueCallback(t,e,n=!0){Xt(t,e,n)}_getConfig(t){return t=this._mergeConfigObj(t,this._element),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}static getInstance(t){return $t.get(Bt(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.3.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(t){return`${t}${this.EVENT_KEY}`}}const ve=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e?e.split(",").map((t=>Nt(t))).join(","):null},ye={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let i=t.parentNode.closest(e);for(;i;)n.push(i),i=i.parentNode.closest(e);return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(",");return this.find(e,t).filter((t=>!Ht(t)&&Ft(t)))},getSelectorFromElement(t){const e=ve(t);return e&&ye.findOne(e)?e:null},getElementFromSelector(t){const e=ve(t);return e?ye.findOne(e):null},getMultipleElementsFromSelector(t){const e=ve(t);return e?ye.find(e):[]}},we=(t,e="hide")=>{const n=`click.dismiss${t.EVENT_KEY}`,i=t.NAME;he.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),Ht(this))return;const s=ye.getElementFromSelector(this)||this.closest(`.${i}`);t.getOrCreateInstance(s)[e]()}))},Ee=".bs.alert",Ae=`close${Ee}`,Ce=`closed${Ee}`;class ke extends be{static get NAME(){return"alert"}close(){if(he.trigger(this._element,Ae).defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),he.trigger(this._element,Ce),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=ke.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}we(ke,"close"),Yt(ke);const xe='[data-bs-toggle="button"]';class Te extends be{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=Te.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}he.on(document,"click.bs.button.data-api",xe,(t=>{t.preventDefault();const e=t.target.closest(xe);Te.getOrCreateInstance(e).toggle()})),Yt(Te);const Oe=".bs.swipe",Le=`touchstart${Oe}`,Ie=`touchmove${Oe}`,Se=`touchend${Oe}`,De=`pointerdown${Oe}`,$e=`pointerup${Oe}`,je={endCallback:null,leftCallback:null,rightCallback:null},Ne={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class Pe extends _e{constructor(t,e){super(),this._element=t,t&&Pe.isSupported()&&(this._config=this._getConfig(e),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return je}static get DefaultType(){return Ne}static get NAME(){return"swipe"}dispose(){he.off(this._element,Oe)}_start(t){this._supportPointerEvents?this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX):this._deltaX=t.touches[0].clientX}_end(t){this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX-this._deltaX),this._handleSwipe(),Qt(this._config.endCallback)}_move(t){this._deltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this._deltaX}_handleSwipe(){const t=Math.abs(this._deltaX);if(t<=40)return;const e=t/this._deltaX;this._deltaX=0,e&&Qt(e>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(he.on(this._element,De,(t=>this._start(t))),he.on(this._element,$e,(t=>this._end(t))),this._element.classList.add("pointer-event")):(he.on(this._element,Le,(t=>this._start(t))),he.on(this._element,Ie,(t=>this._move(t))),he.on(this._element,Se,(t=>this._end(t))))}_eventIsPointerPenTouch(t){return this._supportPointerEvents&&("pen"===t.pointerType||"touch"===t.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const Me=".bs.carousel",Be=".data-api",Fe="ArrowLeft",He="ArrowRight",qe="next",Ke="prev",We="left",ze="right",Re=`slide${Me}`,Ve=`slid${Me}`,Ye=`keydown${Me}`,Qe=`mouseenter${Me}`,Xe=`mouseleave${Me}`,Ue=`dragstart${Me}`,Je=`load${Me}${Be}`,Ge=`click${Me}${Be}`,Ze="carousel",tn="active",en=".active",nn=".carousel-item",sn=en+nn,on={[Fe]:ze,[He]:We},rn={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},an={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class ln extends be{constructor(t,e){super(t,e),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=ye.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===Ze&&this.cycle()}static get Default(){return rn}static get DefaultType(){return an}static get NAME(){return"carousel"}next(){this._slide(qe)}nextWhenVisible(){!document.hidden&&Ft(this._element)&&this.next()}prev(){this._slide(Ke)}pause(){this._isSliding&&Pt(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?he.one(this._element,Ve,(()=>this.cycle())):this.cycle())}to(t){const e=this._getItems();if(t>e.length-1||t<0)return;if(this._isSliding)return void he.one(this._element,Ve,(()=>this.to(t)));const n=this._getItemIndex(this._getActive());if(n===t)return;const i=t>n?qe:Ke;this._slide(i,e[t])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(t){return t.defaultInterval=t.interval,t}_addEventListeners(){this._config.keyboard&&he.on(this._element,Ye,(t=>this._keydown(t))),"hover"===this._config.pause&&(he.on(this._element,Qe,(()=>this.pause())),he.on(this._element,Xe,(()=>this._maybeEnableCycle()))),this._config.touch&&Pe.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const t of ye.find(".carousel-item img",this._element))he.on(t,Ue,(t=>t.preventDefault()));const t={leftCallback:()=>this._slide(this._directionToOrder(We)),rightCallback:()=>this._slide(this._directionToOrder(ze)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new Pe(this._element,t)}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=on[t.key];e&&(t.preventDefault(),this._slide(this._directionToOrder(e)))}_getItemIndex(t){return this._getItems().indexOf(t)}_setActiveIndicatorElement(t){if(!this._indicatorsElement)return;const e=ye.findOne(en,this._indicatorsElement);e.classList.remove(tn),e.removeAttribute("aria-current");const n=ye.findOne(`[data-bs-slide-to="${t}"]`,this._indicatorsElement);n&&(n.classList.add(tn),n.setAttribute("aria-current","true"))}_updateInterval(){const t=this._activeElement||this._getActive();if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);this._config.interval=e||this._config.defaultInterval}_slide(t,e=null){if(this._isSliding)return;const n=this._getActive(),i=t===qe,s=e||Ut(this._getItems(),n,i,this._config.wrap);if(s===n)return;const o=this._getItemIndex(s),r=e=>he.trigger(this._element,e,{relatedTarget:s,direction:this._orderToDirection(t),from:this._getItemIndex(n),to:o});if(r(Re).defaultPrevented)return;if(!n||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=s;const l=i?"carousel-item-start":"carousel-item-end",c=i?"carousel-item-next":"carousel-item-prev";s.classList.add(c),Wt(s),n.classList.add(l),s.classList.add(l),this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add(tn),n.classList.remove(tn,c,l),this._isSliding=!1,r(Ve)}),n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return ye.findOne(sn,this._element)}_getItems(){return ye.find(nn,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(t){return Vt()?t===We?Ke:qe:t===We?qe:Ke}_orderToDirection(t){return Vt()?t===Ke?We:ze:t===Ke?ze:We}static jQueryInterface(t){return this.each((function(){const e=ln.getOrCreateInstance(this,t);if("number"!=typeof t){if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}else e.to(t)}))}}he.on(document,Ge,"[data-bs-slide], [data-bs-slide-to]",(function(t){const e=ye.getElementFromSelector(this);if(!e||!e.classList.contains(Ze))return;t.preventDefault();const n=ln.getOrCreateInstance(e),i=this.getAttribute("data-bs-slide-to");return i?(n.to(i),void n._maybeEnableCycle()):"next"===ge.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),he.on(window,Je,(()=>{const t=ye.find('[data-bs-ride="carousel"]');for(const e of t)ln.getOrCreateInstance(e)})),Yt(ln);const cn=".bs.collapse",dn=`show${cn}`,un=`shown${cn}`,hn=`hide${cn}`,fn=`hidden${cn}`,pn=`click${cn}.data-api`,mn="show",gn="collapse",_n="collapsing",bn=`:scope .${gn} .${gn}`,vn='[data-bs-toggle="collapse"]',yn={parent:null,toggle:!0},wn={parent:"(null|element)",toggle:"boolean"};class En extends be{constructor(t,e){super(t,e),this._isTransitioning=!1,this._triggerArray=[];const n=ye.find(vn);for(const t of n){const e=ye.getSelectorFromElement(t),n=ye.find(e).filter((t=>t===this._element));null!==e&&n.length&&this._triggerArray.push(t)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return yn}static get DefaultType(){return wn}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t=[];if(this._config.parent&&(t=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((t=>t!==this._element)).map((t=>En.getOrCreateInstance(t,{toggle:!1})))),t.length&&t[0]._isTransitioning)return;if(he.trigger(this._element,dn).defaultPrevented)return;for(const e of t)e.hide();const e=this._getDimension();this._element.classList.remove(gn),this._element.classList.add(_n),this._element.style[e]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=`scroll${e[0].toUpperCase()+e.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(_n),this._element.classList.add(gn,mn),this._element.style[e]="",he.trigger(this._element,un)}),this._element,!0),this._element.style[e]=`${this._element[n]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(he.trigger(this._element,hn).defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,Wt(this._element),this._element.classList.add(_n),this._element.classList.remove(gn,mn);for(const t of this._triggerArray){const e=ye.getElementFromSelector(t);e&&!this._isShown(e)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(_n),this._element.classList.add(gn),he.trigger(this._element,fn)}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(mn)}_configAfterMerge(t){return t.toggle=Boolean(t.toggle),t.parent=Bt(t.parent),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=this._getFirstLevelChildren(vn);for(const e of t){const t=ye.getElementFromSelector(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}}_getFirstLevelChildren(t){const e=ye.find(bn,this._config.parent);return ye.find(t,this._config.parent).filter((t=>!e.includes(t)))}_addAriaAndCollapsedClass(t,e){if(t.length)for(const n of t)n.classList.toggle("collapsed",!e),n.setAttribute("aria-expanded",e)}static jQueryInterface(t){const e={};return"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1),this.each((function(){const n=En.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}}))}}he.on(document,pn,vn,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();for(const t of ye.getMultipleElementsFromSelector(this))En.getOrCreateInstance(t,{toggle:!1}).toggle()})),Yt(En);const An="dropdown",Cn=".bs.dropdown",kn=".data-api",xn="ArrowUp",Tn="ArrowDown",On=`hide${Cn}`,Ln=`hidden${Cn}`,In=`show${Cn}`,Sn=`shown${Cn}`,Dn=`click${Cn}${kn}`,$n=`keydown${Cn}${kn}`,jn=`keyup${Cn}${kn}`,Nn="show",Pn='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Mn=`${Pn}.${Nn}`,Bn=".dropdown-menu",Fn=Vt()?"top-end":"top-start",Hn=Vt()?"top-start":"top-end",qn=Vt()?"bottom-end":"bottom-start",Kn=Vt()?"bottom-start":"bottom-end",Wn=Vt()?"left-start":"right-start",zn=Vt()?"right-start":"left-start",Rn={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Vn={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class Yn extends be{constructor(t,e){super(t,e),this._popper=null,this._parent=this._element.parentNode,this._menu=ye.next(this._element,Bn)[0]||ye.prev(this._element,Bn)[0]||ye.findOne(Bn,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return Rn}static get DefaultType(){return Vn}static get NAME(){return An}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Ht(this._element)||this._isShown())return;const t={relatedTarget:this._element};if(!he.trigger(this._element,In,t).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const t of[].concat(...document.body.children))he.on(t,"mouseover",Kt);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Nn),this._element.classList.add(Nn),he.trigger(this._element,Sn,t)}}hide(){if(Ht(this._element)||!this._isShown())return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){if(!he.trigger(this._element,On,t).defaultPrevented){if("ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))he.off(t,"mouseover",Kt);this._popper&&this._popper.destroy(),this._menu.classList.remove(Nn),this._element.classList.remove(Nn),this._element.setAttribute("aria-expanded","false"),ge.removeDataAttribute(this._menu,"popper"),he.trigger(this._element,Ln,t)}}_getConfig(t){if("object"==typeof(t=super._getConfig(t)).reference&&!Mt(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${An.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(){if(void 0===e)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=this._parent:Mt(this._config.reference)?t=Bt(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const n=this._getPopperConfig();this._popper=It(t,this._menu,n)}_isShown(){return this._menu.classList.contains(Nn)}_getPlacement(){const t=this._parent;if(t.classList.contains("dropend"))return Wn;if(t.classList.contains("dropstart"))return zn;if(t.classList.contains("dropup-center"))return"top";if(t.classList.contains("dropdown-center"))return"bottom";const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?Hn:Fn:e?Kn:qn}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(ge.setDataAttribute(this._menu,"popper","static"),t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,...Qt(this._config.popperConfig,[t])}}_selectMenuItem({key:t,target:e}){const n=ye.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((t=>Ft(t)));n.length&&Ut(n,e,t===Tn,!n.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=Yn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(2===t.button||"keyup"===t.type&&"Tab"!==t.key)return;const e=ye.find(Mn);for(const n of e){const e=Yn.getInstance(n);if(!e||!1===e._config.autoClose)continue;const i=t.composedPath(),s=i.includes(e._menu);if(i.includes(e._element)||"inside"===e._config.autoClose&&!s||"outside"===e._config.autoClose&&s)continue;if(e._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;const o={relatedTarget:e._element};"click"===t.type&&(o.clickEvent=t),e._completeHide(o)}}static dataApiKeydownHandler(t){const e=/input|textarea/i.test(t.target.tagName),n="Escape"===t.key,i=[xn,Tn].includes(t.key);if(!i&&!n)return;if(e&&!n)return;t.preventDefault();const s=this.matches(Pn)?this:ye.prev(this,Pn)[0]||ye.next(this,Pn)[0]||ye.findOne(Pn,t.delegateTarget.parentNode),o=Yn.getOrCreateInstance(s);if(i)return t.stopPropagation(),o.show(),void o._selectMenuItem(t);o._isShown()&&(t.stopPropagation(),o.hide(),s.focus())}}he.on(document,$n,Pn,Yn.dataApiKeydownHandler),he.on(document,$n,Bn,Yn.dataApiKeydownHandler),he.on(document,Dn,Yn.clearMenus),he.on(document,jn,Yn.clearMenus),he.on(document,Dn,Pn,(function(t){t.preventDefault(),Yn.getOrCreateInstance(this).toggle()})),Yt(Yn);const Qn="backdrop",Xn="show",Un=`mousedown.bs.${Qn}`,Jn={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Gn={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Zn extends _e{constructor(t){super(),this._config=this._getConfig(t),this._isAppended=!1,this._element=null}static get Default(){return Jn}static get DefaultType(){return Gn}static get NAME(){return Qn}show(t){if(!this._config.isVisible)return void Qt(t);this._append();const e=this._getElement();this._config.isAnimated&&Wt(e),e.classList.add(Xn),this._emulateAnimation((()=>{Qt(t)}))}hide(t){this._config.isVisible?(this._getElement().classList.remove(Xn),this._emulateAnimation((()=>{this.dispose(),Qt(t)}))):Qt(t)}dispose(){this._isAppended&&(he.off(this._element,Un),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_configAfterMerge(t){return t.rootElement=Bt(t.rootElement),t}_append(){if(this._isAppended)return;const t=this._getElement();this._config.rootElement.append(t),he.on(t,Un,(()=>{Qt(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(t){Xt(t,this._getElement(),this._config.isAnimated)}}const ti=".bs.focustrap",ei=`focusin${ti}`,ni=`keydown.tab${ti}`,ii="backward",si={autofocus:!0,trapElement:null},oi={autofocus:"boolean",trapElement:"element"};class ri extends _e{constructor(t){super(),this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return si}static get DefaultType(){return oi}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),he.off(document,ti),he.on(document,ei,(t=>this._handleFocusin(t))),he.on(document,ni,(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,he.off(document,ti))}_handleFocusin(t){const{trapElement:e}=this._config;if(t.target===document||t.target===e||e.contains(t.target))return;const n=ye.focusableChildren(e);0===n.length?e.focus():this._lastTabNavDirection===ii?n[n.length-1].focus():n[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?ii:"forward")}}const ai=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",li=".sticky-top",ci="padding-right",di="margin-right";class ui{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,ci,(e=>e+t)),this._setElementAttributes(ai,ci,(e=>e+t)),this._setElementAttributes(li,di,(e=>e-t))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,ci),this._resetElementAttributes(ai,ci),this._resetElementAttributes(li,di)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t).getPropertyValue(e);t.style.setProperty(e,`${n(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(t,e){const n=t.style.getPropertyValue(e);n&&ge.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const n=ge.getDataAttribute(t,e);null!==n?(ge.removeDataAttribute(t,e),t.style.setProperty(e,n)):t.style.removeProperty(e)}))}_applyManipulationCallback(t,e){if(Mt(t))e(t);else for(const n of ye.find(t,this._element))e(n)}}const hi=".bs.modal",fi=`hide${hi}`,pi=`hidePrevented${hi}`,mi=`hidden${hi}`,gi=`show${hi}`,_i=`shown${hi}`,bi=`resize${hi}`,vi=`click.dismiss${hi}`,yi=`mousedown.dismiss${hi}`,wi=`keydown.dismiss${hi}`,Ei=`click${hi}.data-api`,Ai="modal-open",Ci="show",ki="modal-static",xi={backdrop:!0,focus:!0,keyboard:!0},Ti={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Oi extends be{constructor(t,e){super(t,e),this._dialog=ye.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new ui,this._addEventListeners()}static get Default(){return xi}static get DefaultType(){return Ti}static get NAME(){return"modal"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||he.trigger(this._element,gi,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Ai),this._adjustDialog(),this._backdrop.show((()=>this._showElement(t))))}hide(){this._isShown&&!this._isTransitioning&&(he.trigger(this._element,fi).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Ci),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){he.off(window,hi),he.off(this._dialog,hi),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Zn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new ri({trapElement:this._element})}_showElement(t){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const e=ye.findOne(".modal-body",this._dialog);e&&(e.scrollTop=0),Wt(this._element),this._element.classList.add(Ci),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,he.trigger(this._element,_i,{relatedTarget:t})}),this._dialog,this._isAnimated())}_addEventListeners(){he.on(this._element,wi,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),he.on(window,bi,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),he.on(this._element,yi,(t=>{he.one(this._element,vi,(e=>{this._element===t.target&&this._element===e.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Ai),this._resetAdjustments(),this._scrollBar.reset(),he.trigger(this._element,mi)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(he.trigger(this._element,pi).defaultPrevented)return;const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._element.style.overflowY;"hidden"===e||this._element.classList.contains(ki)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add(ki),this._queueCallback((()=>{this._element.classList.remove(ki),this._queueCallback((()=>{this._element.style.overflowY=e}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;if(n&&!t){const t=Vt()?"paddingLeft":"paddingRight";this._element.style[t]=`${e}px`}if(!n&&t){const t=Vt()?"paddingRight":"paddingLeft";this._element.style[t]=`${e}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const n=Oi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}}))}}he.on(document,Ei,'[data-bs-toggle="modal"]',(function(t){const e=ye.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),he.one(e,gi,(t=>{t.defaultPrevented||he.one(e,mi,(()=>{Ft(this)&&this.focus()}))}));const n=ye.findOne(".modal.show");n&&Oi.getInstance(n).hide(),Oi.getOrCreateInstance(e).toggle(this)})),we(Oi),Yt(Oi);const Li=".bs.offcanvas",Ii=".data-api",Si=`load${Li}${Ii}`,Di="show",$i="showing",ji="hiding",Ni=".offcanvas.show",Pi=`show${Li}`,Mi=`shown${Li}`,Bi=`hide${Li}`,Fi=`hidePrevented${Li}`,Hi=`hidden${Li}`,qi=`resize${Li}`,Ki=`click${Li}${Ii}`,Wi=`keydown.dismiss${Li}`,zi={backdrop:!0,keyboard:!0,scroll:!1},Ri={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class Vi extends be{constructor(t,e){super(t,e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return zi}static get DefaultType(){return Ri}static get NAME(){return"offcanvas"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||he.trigger(this._element,Pi,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new ui).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add($i),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(Di),this._element.classList.remove($i),he.trigger(this._element,Mi,{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(he.trigger(this._element,Bi).defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(ji),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove(Di,ji),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new ui).reset(),he.trigger(this._element,Hi)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const t=Boolean(this._config.backdrop);return new Zn({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?()=>{"static"!==this._config.backdrop?this.hide():he.trigger(this._element,Fi)}:null})}_initializeFocusTrap(){return new ri({trapElement:this._element})}_addEventListeners(){he.on(this._element,Wi,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():he.trigger(this._element,Fi))}))}static jQueryInterface(t){return this.each((function(){const e=Vi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}he.on(document,Ki,'[data-bs-toggle="offcanvas"]',(function(t){const e=ye.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),Ht(this))return;he.one(e,Hi,(()=>{Ft(this)&&this.focus()}));const n=ye.findOne(Ni);n&&n!==e&&Vi.getInstance(n).hide(),Vi.getOrCreateInstance(e).toggle(this)})),he.on(window,Si,(()=>{for(const t of ye.find(Ni))Vi.getOrCreateInstance(t).show()})),he.on(window,qi,(()=>{for(const t of ye.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(t).position&&Vi.getOrCreateInstance(t).hide()})),we(Vi),Yt(Vi);const Yi={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],dd:[],div:[],dl:[],dt:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Qi=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Xi=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,Ui=(t,e)=>{const n=t.nodeName.toLowerCase();return e.includes(n)?!Qi.has(n)||Boolean(Xi.test(t.nodeValue)):e.filter((t=>t instanceof RegExp)).some((t=>t.test(n)))},Ji={allowList:Yi,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Gi={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Zi={entry:"(string|element|function|null)",selector:"(string|element)"};class ts extends _e{constructor(t){super(),this._config=this._getConfig(t)}static get Default(){return Ji}static get DefaultType(){return Gi}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((t=>this._resolvePossibleFunction(t))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(t){return this._checkContent(t),this._config.content={...this._config.content,...t},this}toHtml(){const t=document.createElement("div");t.innerHTML=this._maybeSanitize(this._config.template);for(const[e,n]of Object.entries(this._config.content))this._setContent(t,n,e);const e=t.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&e.classList.add(...n.split(" ")),e}_typeCheckConfig(t){super._typeCheckConfig(t),this._checkContent(t.content)}_checkContent(t){for(const[e,n]of Object.entries(t))super._typeCheckConfig({selector:e,entry:n},Zi)}_setContent(t,e,n){const i=ye.findOne(n,t);i&&((e=this._resolvePossibleFunction(e))?Mt(e)?this._putElementInTemplate(Bt(e),i):this._config.html?i.innerHTML=this._maybeSanitize(e):i.textContent=e:i.remove())}_maybeSanitize(t){return this._config.sanitize?function(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),s=[].concat(...i.body.querySelectorAll("*"));for(const t of s){const n=t.nodeName.toLowerCase();if(!Object.keys(e).includes(n)){t.remove();continue}const i=[].concat(...t.attributes),s=[].concat(e["*"]||[],e[n]||[]);for(const e of i)Ui(e,s)||t.removeAttribute(e.nodeName)}return i.body.innerHTML}(t,this._config.allowList,this._config.sanitizeFn):t}_resolvePossibleFunction(t){return Qt(t,[this])}_putElementInTemplate(t,e){if(this._config.html)return e.innerHTML="",void e.append(t);e.textContent=t.textContent}}const es=new Set(["sanitize","allowList","sanitizeFn"]),ns="fade",is="show",ss=".tooltip-inner",os=".modal",rs="hide.bs.modal",as="hover",ls="focus",cs={AUTO:"auto",TOP:"top",RIGHT:Vt()?"left":"right",BOTTOM:"bottom",LEFT:Vt()?"right":"left"},ds={allowList:Yi,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},us={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class hs extends be{constructor(t,n){if(void 0===e)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t,n),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return ds}static get DefaultType(){return us}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),he.off(this._element.closest(os),rs,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const t=he.trigger(this._element,this.constructor.eventName("show")),e=(qt(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(t.defaultPrevented||!e)return;this._disposePopper();const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),he.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(n),n.classList.add(is),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))he.on(t,"mouseover",Kt);this._queueCallback((()=>{he.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(this._isShown()&&!he.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(is),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))he.off(t,"mouseover",Kt);this._activeTrigger.click=!1,this._activeTrigger[ls]=!1,this._activeTrigger[as]=!1,this._isHovered=null,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),he.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(t){const e=this._getTemplateFactory(t).toHtml();if(!e)return null;e.classList.remove(ns,is),e.classList.add(`bs-${this.constructor.NAME}-auto`);const n=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME).toString();return e.setAttribute("id",n),this._isAnimated()&&e.classList.add(ns),e}setContent(t){this._newContent=t,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(t){return this._templateFactory?this._templateFactory.changeContent(t):this._templateFactory=new ts({...this._config,content:t,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{[ss]:this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(t){return this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(ns)}_isShown(){return this.tip&&this.tip.classList.contains(is)}_createPopper(t){const e=Qt(this._config.placement,[this,t,this._element]),n=cs[e.toUpperCase()];return It(this._element,t,this._getPopperConfig(n))}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return Qt(t,[this._element])}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:t=>{this._getTipElement().setAttribute("data-popper-placement",t.state.placement)}}]};return{...e,...Qt(this._config.popperConfig,[e])}}_setListeners(){const t=this._config.trigger.split(" ");for(const e of t)if("click"===e)he.on(this._element,this.constructor.eventName("click"),this._config.selector,(t=>{this._initializeOnDelegatedTarget(t).toggle()}));else if("manual"!==e){const t=e===as?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),n=e===as?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");he.on(this._element,t,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusin"===t.type?ls:as]=!0,e._enter()})),he.on(this._element,n,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusout"===t.type?ls:as]=e._element.contains(t.relatedTarget),e._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},he.on(this._element.closest(os),rs,this._hideModalHandler)}_fixTitle(){const t=this._element.getAttribute("title");t&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",t),this._element.setAttribute("data-bs-original-title",t),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(t,e){clearTimeout(this._timeout),this._timeout=setTimeout(t,e)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(t){const e=ge.getDataAttributes(this._element);for(const t of Object.keys(e))es.has(t)&&delete e[t];return t={...e,..."object"==typeof t&&t?t:{}},t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t.container=!1===t.container?document.body:Bt(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),t}_getDelegateConfig(){const t={};for(const[e,n]of Object.entries(this._config))this.constructor.Default[e]!==n&&(t[e]=n);return t.selector=!1,t.trigger="manual",t}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(t){return this.each((function(){const e=hs.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Yt(hs);const fs=".popover-header",ps=".popover-body",ms={...hs.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},gs={...hs.DefaultType,content:"(null|string|element|function)"};class _s extends hs{static get Default(){return ms}static get DefaultType(){return gs}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{[fs]:this._getTitle(),[ps]:this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(t){return this.each((function(){const e=_s.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Yt(_s);const bs=".bs.scrollspy",vs=`activate${bs}`,ys=`click${bs}`,ws=`load${bs}.data-api`,Es="active",As="[href]",Cs=".nav-link",ks=`${Cs}, .nav-item > ${Cs}, .list-group-item`,xs={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Ts={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Os extends be{constructor(t,e){super(t,e),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return xs}static get DefaultType(){return Ts}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const t of this._observableSections.values())this._observer.observe(t)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(t){return t.target=Bt(t.target)||document.body,t.rootMargin=t.offset?`${t.offset}px 0px -30%`:t.rootMargin,"string"==typeof t.threshold&&(t.threshold=t.threshold.split(",").map((t=>Number.parseFloat(t)))),t}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(he.off(this._config.target,ys),he.on(this._config.target,ys,As,(t=>{const e=this._observableSections.get(t.target.hash);if(e){t.preventDefault();const n=this._rootElement||window,i=e.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i,behavior:"smooth"});n.scrollTop=i}})))}_getNewObserver(){const t={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((t=>this._observerCallback(t)),t)}_observerCallback(t){const e=t=>this._targetLinks.get(`#${t.target.id}`),n=t=>{this._previousScrollData.visibleEntryTop=t.target.offsetTop,this._process(e(t))},i=(this._rootElement||document.documentElement).scrollTop,s=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const o of t){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(e(o));continue}const t=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&t){if(n(o),!i)return}else s||t||n(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const t=ye.find(As,this._config.target);for(const e of t){if(!e.hash||Ht(e))continue;const t=ye.findOne(decodeURI(e.hash),this._element);Ft(t)&&(this._targetLinks.set(decodeURI(e.hash),e),this._observableSections.set(e.hash,t))}}_process(t){this._activeTarget!==t&&(this._clearActiveClass(this._config.target),this._activeTarget=t,t.classList.add(Es),this._activateParents(t),he.trigger(this._element,vs,{relatedTarget:t}))}_activateParents(t){if(t.classList.contains("dropdown-item"))ye.findOne(".dropdown-toggle",t.closest(".dropdown")).classList.add(Es);else for(const e of ye.parents(t,".nav, .list-group"))for(const t of ye.prev(e,ks))t.classList.add(Es)}_clearActiveClass(t){t.classList.remove(Es);const e=ye.find(`${As}.${Es}`,t);for(const t of e)t.classList.remove(Es)}static jQueryInterface(t){return this.each((function(){const e=Os.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}he.on(window,ws,(()=>{for(const t of ye.find('[data-bs-spy="scroll"]'))Os.getOrCreateInstance(t)})),Yt(Os);const Ls=".bs.tab",Is=`hide${Ls}`,Ss=`hidden${Ls}`,Ds=`show${Ls}`,$s=`shown${Ls}`,js=`click${Ls}`,Ns=`keydown${Ls}`,Ps=`load${Ls}`,Ms="ArrowLeft",Bs="ArrowRight",Fs="ArrowUp",Hs="ArrowDown",qs="Home",Ks="End",Ws="active",zs="fade",Rs="show",Vs=".dropdown-toggle",Ys=`:not(${Vs})`,Qs='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Xs=`.nav-link${Ys}, .list-group-item${Ys}, [role="tab"]${Ys}, ${Qs}`,Us=`.${Ws}[data-bs-toggle="tab"], .${Ws}[data-bs-toggle="pill"], .${Ws}[data-bs-toggle="list"]`;class Js extends be{constructor(t){super(t),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),he.on(this._element,Ns,(t=>this._keydown(t))))}static get NAME(){return"tab"}show(){const t=this._element;if(this._elemIsActive(t))return;const e=this._getActiveElem(),n=e?he.trigger(e,Is,{relatedTarget:t}):null;he.trigger(t,Ds,{relatedTarget:e}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(e,t),this._activate(t,e))}_activate(t,e){t&&(t.classList.add(Ws),this._activate(ye.getElementFromSelector(t)),this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.removeAttribute("tabindex"),t.setAttribute("aria-selected",!0),this._toggleDropDown(t,!0),he.trigger(t,$s,{relatedTarget:e})):t.classList.add(Rs)}),t,t.classList.contains(zs)))}_deactivate(t,e){t&&(t.classList.remove(Ws),t.blur(),this._deactivate(ye.getElementFromSelector(t)),this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.setAttribute("aria-selected",!1),t.setAttribute("tabindex","-1"),this._toggleDropDown(t,!1),he.trigger(t,Ss,{relatedTarget:e})):t.classList.remove(Rs)}),t,t.classList.contains(zs)))}_keydown(t){if(![Ms,Bs,Fs,Hs,qs,Ks].includes(t.key))return;t.stopPropagation(),t.preventDefault();const e=this._getChildren().filter((t=>!Ht(t)));let n;if([qs,Ks].includes(t.key))n=e[t.key===qs?0:e.length-1];else{const i=[Bs,Hs].includes(t.key);n=Ut(e,t.target,i,!0)}n&&(n.focus({preventScroll:!0}),Js.getOrCreateInstance(n).show())}_getChildren(){return ye.find(Xs,this._parent)}_getActiveElem(){return this._getChildren().find((t=>this._elemIsActive(t)))||null}_setInitialAttributes(t,e){this._setAttributeIfNotExists(t,"role","tablist");for(const t of e)this._setInitialAttributesOnChild(t)}_setInitialAttributesOnChild(t){t=this._getInnerElement(t);const e=this._elemIsActive(t),n=this._getOuterElement(t);t.setAttribute("aria-selected",e),n!==t&&this._setAttributeIfNotExists(n,"role","presentation"),e||t.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(t,"role","tab"),this._setInitialAttributesOnTargetPanel(t)}_setInitialAttributesOnTargetPanel(t){const e=ye.getElementFromSelector(t);e&&(this._setAttributeIfNotExists(e,"role","tabpanel"),t.id&&this._setAttributeIfNotExists(e,"aria-labelledby",`${t.id}`))}_toggleDropDown(t,e){const n=this._getOuterElement(t);if(!n.classList.contains("dropdown"))return;const i=(t,i)=>{const s=ye.findOne(t,n);s&&s.classList.toggle(i,e)};i(Vs,Ws),i(".dropdown-menu",Rs),n.setAttribute("aria-expanded",e)}_setAttributeIfNotExists(t,e,n){t.hasAttribute(e)||t.setAttribute(e,n)}_elemIsActive(t){return t.classList.contains(Ws)}_getInnerElement(t){return t.matches(Xs)?t:ye.findOne(Xs,t)}_getOuterElement(t){return t.closest(".nav-item, .list-group-item")||t}static jQueryInterface(t){return this.each((function(){const e=Js.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}he.on(document,js,Qs,(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),Ht(this)||Js.getOrCreateInstance(this).show()})),he.on(window,Ps,(()=>{for(const t of ye.find(Us))Js.getOrCreateInstance(t)})),Yt(Js);const Gs=".bs.toast",Zs=`mouseover${Gs}`,to=`mouseout${Gs}`,eo=`focusin${Gs}`,no=`focusout${Gs}`,io=`hide${Gs}`,so=`hidden${Gs}`,oo=`show${Gs}`,ro=`shown${Gs}`,ao="hide",lo="show",co="showing",uo={animation:"boolean",autohide:"boolean",delay:"number"},ho={animation:!0,autohide:!0,delay:5e3};class fo extends be{constructor(t,e){super(t,e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return ho}static get DefaultType(){return uo}static get NAME(){return"toast"}show(){he.trigger(this._element,oo).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(ao),Wt(this._element),this._element.classList.add(lo,co),this._queueCallback((()=>{this._element.classList.remove(co),he.trigger(this._element,ro),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(he.trigger(this._element,io).defaultPrevented||(this._element.classList.add(co),this._queueCallback((()=>{this._element.classList.add(ao),this._element.classList.remove(co,lo),he.trigger(this._element,so)}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(lo),super.dispose()}isShown(){return this._element.classList.contains(lo)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){he.on(this._element,Zs,(t=>this._onInteraction(t,!0))),he.on(this._element,to,(t=>this._onInteraction(t,!1))),he.on(this._element,eo,(t=>this._onInteraction(t,!0))),he.on(this._element,no,(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=fo.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}we(fo),Yt(fo);const po={getKey:function(t){return JSON.parse(localStorage.getItem(t))},setKey:function(t,e){localStorage.setItem(t,JSON.stringify(e))},removeKey:function(t){localStorage.removeItem(t)}};function mo(t,e){let n=!1;return t.todo.forEach((t=>{if(t.title===e)return n=!0,void console.log("todo title already given")})),!n}function go(t,e,n,i,s="_inbox",o="undone"){let r=po.getKey(s);r?mo(r,t)&&(r.todo.push({title:t,description:e,duedate:n,priority:i,status:o}),po.setKey(s,r)):console.log("Project does not exist.")}function _o(t,e){let n=po.getKey(t);const i=n.todo.findIndex((t=>t.title===e));n?mo(n,e)?console.log("Invalid to-do"):(n.todo.splice(i,1),po.setKey(t,n)):console.log("Project does not exist")}po.getKey("_inbox")?console.log("_inbox already exists in local storage"):(po.setKey("_inbox",{name:"_inbox",todo:[]}),po.getKey("_mode")?console.log("_mode already exists in local storage"):(po.setKey("_mode",""),po.getKey("_projects")?console.log("_projects already exists in local storage"):po.setKey("_projects",{projects:[]})));const bo=document.getElementById("AddTaskButtonModal"),vo=document.getElementById("projectNameID");function yo(){bo.classList.remove("d-none"),vo.className="mt-5 fw-bold d-inline-block",vo.style.opacity="1",vo.textContent=""}function wo(t){document.getElementById("projectNameID").textContent=t}document.getElementById("inboxButtonID").addEventListener("click",(function(){wo("Tasks"),To("_inbox"),document.getElementById("deleteProjectButton").classList.add("d-none"),yo(),Lo(po.getKey("_inbox"))}));const Eo=document.getElementById("editTaskModal"),Ao=new Oi(Eo),Co=document.getElementById("save-edit-button-modal");function ko(t,e){const n=t.todo.find((t=>t.title===e));n&&function(t){document.getElementById("edit-task-title").value=t.title,document.getElementById("edit-task-description").value=t.description,document.getElementById("edit-task-date").value=function(t){if(!t)return"";const e=new Date(t);return`${e.getFullYear()}-${(e.getMonth()+1).toString().padStart(2,"0")}-${e.getDate().toString().padStart(2,"0")}`}(t.duedate),document.getElementById("edit-task-priority").value=t.priority}(n);const i=()=>{!function(){const t=document.getElementById("edit-task-title").value,e=document.getElementById("edit-task-description").value,n=document.getElementById("edit-task-date").value,i=document.getElementById("edit-task-priority").value;return t&&e&&n&&i}()?alert("Fill all the required fields"):(function(t,e){const n=document.getElementById("edit-task-title").value,i=document.getElementById("edit-task-description").value,s=document.getElementById("edit-task-date").value,o=+document.getElementById("edit-task-priority").value;_o(t,e),go(n,i,s,o,t),Lo(po.getKey(t))}(xo,e),Ao.hide())};Co.addEventListener("click",i),Eo.addEventListener("hide.bs.modal",(()=>{Co.removeEventListener("click",i)}))}let xo="_inbox";function To(t){xo=t}function Oo(t){t?po.getKey(t).projects&&(document.querySelectorAll(".list-group._project-group button").forEach((t=>{t.remove()})),po.getKey(t).projects.forEach((t=>{const e=document.createElement("button");e.setAttribute("type","button"),e.classList.add("list-group-item"),e.classList.add("list-group-item-action"),e.setAttribute("data-bs-dismiss","offcanvas"),e.textContent=t,e.addEventListener("click",(()=>{!function(t){wo(t),To(t),document.getElementById("deleteProjectButton").classList.remove("d-none"),yo(),Lo(po.getKey(t))}(t)})),document.querySelector(".list-group._project-group").appendChild(e)}))):console.log("project not found at generateProjectsSelection(project)")}function Lo(t,e="default"){document.querySelector(".accordion-item")&&document.querySelectorAll(".accordion-item").forEach((t=>{t.remove()}));let n=t.todo;"default"===e&&n.sort((function(t,e){return t.priority-e.priority}));const i=document.getElementById("accordionContainer"),s=document.getElementById("projectNameID");"_inbox"===t.name?s.textContent="Tasks":s.textContent=t.name;let o=0;n.forEach((e=>{const n=document.createElement("div");n.className="accordion-item";const s=document.createElement("h2");s.className="accordion-header";const r=document.createElement("button");r.className="accordion-button fs-4 collapsed",r.type="button",r.dataset.bsToggle="collapse",r.dataset.bsTarget=`#collapse${o}`,r.setAttribute("aria-expanded","true"),r.setAttribute("aria-controls",`collapse${o}`);const a=document.createElement("span");a.className="task_title",a.textContent=e.title,r.appendChild(a);const l=document.createElement("span");1===e.priority?(l.className="priority_task_badge badge text-bg-danger ms-5",l.textContent="High"):2===e.priority?(l.className="priority_task_badge badge text-bg-warning ms-5",l.textContent="Med"):3===e.priority&&(l.className="priority_task_badge badge text-bg-primary ms-5",l.textContent="Low"),r.appendChild(l),s.appendChild(r),n.appendChild(s);const c=document.createElement("small");c.className="d-none ms-5 px-2 py-1 fw-semibold text-success-emphasis bg-success-subtle border border-success-subtle rounded-2","done"===e.status?c.classList.remove("d-none"):c.classList.contains("d-none")||c.classList.add("d-none"),c.textContent="Done",r.appendChild(c);const d=document.createElement("div");d.id=`collapse${o}`,d.className="accordion-collapse collapse",d.dataset.bsParent="#accordionExample";const u=document.createElement("div");u.className="accordion-body";const h=document.createElement("p");h.className="task_description",h.textContent=e.description,u.appendChild(h);const f=document.createElement("p");f.className="task_deadline",f.textContent=e.duedate,u.appendChild(f),u.appendChild(document.createElement("br"));const p=document.createElement("button");p.type="button",p.className="delete_task_button btn btn-danger btn-block mt-3 ms-right-2",p.textContent="Delete",u.appendChild(p),p.addEventListener("click",(()=>{!function(t,e){_o(t,e),Lo(po.getKey(t))}(xo,e.title)}));const m=document.createElement("button");m.type="button",m.className="edit_task_button btn btn-primary mt-3 ms-2",m.addEventListener("click",(()=>{ko(t,e.title)})),m.dataset.bsToggle="modal",m.dataset.bsTarget="#editTaskModal",m.textContent="Edit",u.appendChild(m);const g=document.createElement("button");g.type="button",g.className="done_task_button btn btn-success mt-3 ms-2",g.textContent="Done",g.addEventListener("click",(()=>{!function(t,e,n){const i=e.todo.find((t=>t.title===n));i?("undone"===i.status?i.status="done":i.status="undone",po.setKey(e.name,e),Lo(e)):console.log(`Item with title "${n}" not found.`)}(0,t,e.title)})),u.appendChild(g),d.appendChild(u),n.appendChild(d),i.appendChild(n),o+=1}))}"dark"===po.getKey("_mode")?document.querySelector("body").setAttribute("data-bs-theme","dark"):document.querySelector("body").setAttribute("data-bs-theme","light"),document.querySelector(".dropdown-item.light").addEventListener("click",(()=>{po.setKey("_mode","light"),document.querySelector("body").setAttribute("data-bs-theme","")})),document.querySelector(".dropdown-item.dark").addEventListener("click",(()=>{po.setKey("_mode","dark"),document.querySelector("body").setAttribute("data-bs-theme","dark")}));const Io=new Oi(document.getElementById("AddModal"));document.getElementById("AddTaskButtonModal").addEventListener("click",(()=>{document.getElementById("AddTaskButton").dataset.target=xo})),document.getElementById("AddModal").addEventListener("hide.bs.modal",(function(){document.body.querySelectorAll("form .form-control").forEach((t=>{t.value=""}))})),document.getElementById("AddTaskButton").addEventListener("click",(function(){const t={title:document.getElementById("add-task-title").value,description:document.getElementById("add-task-description").value,due:document.getElementById("add-task-date").value,priority:+document.getElementById("add-task-priority").value};!function(t){return t.title&&t.description&&t.due&&t.priority}(t)?alert("Fill all the required fields"):(go(t.title,t.description,t.due,t.priority,xo),Io.hide(),Lo(po.getKey(xo)))}));const So=new Oi(document.getElementById("AddProjectModal"));document.getElementById("AddProjectButton").addEventListener("click",(()=>{const t=document.getElementById("add-project-title");t.value?t.value&&(function(t){if(po.getKey(t))return void console.log("Project already exists. Please choose a different name.");let e=po.getKey("_projects").projects;e.push(t),po.setKey("_projects",{projects:e}),po.setKey(t,{name:t,todo:[]})}(t.value),t.value="",So.hide(),Oo("_projects")):alert("Please fill the required information")})),document.getElementById("deleteProjectButton").addEventListener("click",(function(){document.getElementById("deleteProjectButton").classList.add("d-none"),function(t,e){let n=po.getKey(e);!function(t){const e=po.getKey(t);return e?(console.log(e),!0):(console.log("Project does not exist."),!1)}(t)?console.log("Project does not exist"):(n.projects=n.projects.filter((e=>e!==t)),po.setKey(e,n),po.removeKey(t))}(xo,"_projects"),bo.classList.add("d-none"),vo.className="position-absolute top-50 start-50 translate-middle",vo.style.opacity="0.5",vo.textContent="Empty please choose a project :)",Oo("_projects")})),Oo("_projects"),Lo(po.getKey("_inbox"))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,